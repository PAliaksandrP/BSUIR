#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <fcntl.h>

#define MAX_BYTES 255

void search_combination(const char *filename, const char *combination, int m) {
    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        printf("Error opening file %s\n", filename);
        return;
    }

    int total_bytes = 0;
    int found = 0;
    char buffer[MAX_BYTES];

    while (!feof(file)) {
        size_t bytes_read = fread(buffer, 1, MAX_BYTES, file);
        total_bytes += bytes_read;

        if (bytes_read >= m) {
            for (size_t i = 0; i <= bytes_read - m; ++i) {
                if (memcmp(buffer + i, combination, m) == 0) {
                    found = 1;
                    break;
                }
            }
        }

        if (found) break;
    }

    printf("PID: %d, Filename: %s, Total Bytes Read: %d, Result: %s\n",
           getpid(), filename, total_bytes, (found ? "Combination found" : "Combination not found"));

    fclose(file);
}

int main() {
    char directory_name[256];
    printf("Enter directory name: ");
    scanf("%s", directory_name);

    int N;
    printf("Enter maximum number of simultaneous processes: ");
    scanf("%d", &N);

    char combination[MAX_BYTES];
    printf("Enter combination of bytes to search (max %d bytes): ", MAX_BYTES);
    scanf("%s", combination);
    int m = strlen(combination);

    DIR *dir = opendir(directory_name);
    if (dir == NULL) {
        printf("Error opening directory %s\n", directory_name);
        return 1;
    }

    struct dirent *entry;
    int processes_count = 0;

    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_REG) {
            char file_path[512];
            snprintf(file_path, sizeof(file_path), "%s/%s", directory_name, entry->d_name);

            pid_t pid = fork();
            if (pid < 0) {
                printf("Fork failed for file %s\n", entry->d_name);
                continue;
            } else if (pid == 0) {
                search_combination(file_path, combination, m);
                exit(0);
            } else {
                processes_count++;
                if (processes_count >= N) {
                    wait(NULL);
                    processes_count--;
                }
            }
        }
    }

    closedir(dir);

    while (wait(NULL) > 0) {
        // Wait for remaining child processes to finish
    }

    return 0;
}