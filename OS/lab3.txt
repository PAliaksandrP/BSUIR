#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#define num_philosophers 5
pthread_mutex_t forks[num_philosophers];
void *philosopher(void *arg){
int id=*(int *)arg;
while(1){
printf("Philosoph is thinking.\n",id);
sleep(rand()%3+1);
printf("Philosoph %d is hungry and trying to take forks.\n",id);
int left_fork=id;
int right_fork=(id+1)%num_philosophers;
pthread_mutex_lock(&forks[left_fork]);
sleep(1);
pthread_mutex_lock(&forks[right_fork]);
printf("Philosoph %d is eating spaghetti.\n",id);
sleep(rand()%3+1);
pthread_mutex_unlock(&forks[left_fork]);
pthread_mutex_unlock(&forks[right_fork]);
printf("Philosoph is done eating and freed forks.\n",id);
}
return NULL;
}
int main(){
pthread_t philosophers[num_philosophers];
int philosopher_ids[num_philosophers];
for (int i=0;i<num_philosophers;++i){
philosopher_ids[i]=i;
pthread_mutex_init(&forks[i], NULL);
}
for (int i=0;i<num_philosophers;++i){
pthread_create(&philosophers[i],NULL,philosopher,&philosopher_ids[i]);
}
for (int i=0;i<num_philosophers;++i){
pthread_join(philosophers[i],NULL);
pthread_mutex_destroy(&forks[i]);
}
return 0;
}